package com.mycompany;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.xml.namespace.QName;

import com.bradmcevoy.http.FileItem;
import com.bradmcevoy.http.PostableResource;
import com.bradmcevoy.http.Range;
import com.bradmcevoy.http.ReplaceableResource;
import com.bradmcevoy.http.Response;
import com.bradmcevoy.property.BeanPropertyResource;
import com.bradmcevoy.property.MultiNamespaceCustomPropertyResource;
import com.bradmcevoy.property.PropertySource.PropertyAccessibility;
import com.bradmcevoy.property.PropertySource.PropertyMetaData;



/**
 * Demonstrates implementing:
 *   - MultiNamespaceCustomPropertyResource - for getting and setting custom properties
 *   - BeanPropertyResource - showing how to edit bean properties
 *   - ReplaceableResource - for replacing content on PUTs to existing resources
 *   - PostableResource - for form processing
 *
 */
// This annotation allows us to edit the text property
@BeanPropertyResource("http://milton.ettrema.com/demo/beanprop") 
public class TTextResource extends TResource implements PostableResource, ReplaceableResource, MultiNamespaceCustomPropertyResource {

    private static org.apache.log4j.Logger log = org.apache.log4j.Logger.getLogger( TTextResource.class );
    private static final String START_CONTENT = "<textarea name=\"text\" cols=\"60\" rows=\"20\">";
    private static final String END_CONTENT = "</textarea>";
    private static final String NS_EXAMPLE = "http://milton.ettrema.com/demo/multins";
    private String text;
    private Map<String, String> props = new HashMap<String, String>();

    public TTextResource( TFolderResource parent, String name, String text ) {
        super( parent, name );
        this.text = text;
        props.put( "helloWorldProperty", "i am " + name );
    }

    @Override
    protected Object clone( TFolderResource newParent ) {
        return new TTextResource( newParent, name, text );
    }

    public String getContentType( String accept ) {
        return Response.ContentType.HTTP.toString();
    }

    public void sendContent( OutputStream out, Range range, Map<String, String> params, String contentType ) throws IOException {
        PrintWriter printer = new PrintWriter( out, true );
        sendContentStart( printer );
        sendContentMiddle( printer );
        sendContentFinish( printer );
    }

    protected void sendContentMiddle( final PrintWriter printer ) {
        print( printer, "<form method='post' action='" + this.getHref() + "'>" );
        print( printer, "<fieldset>" );
        print( printer, "<input type='text' name='name' value='" + this.getName() + "'/>" );
        print( printer, "<br/>" );
        printer.print( START_CONTENT );
        print( printer, text );
        printer.print( END_CONTENT );
        print( printer, "<br/>" );
        printer.print( "<input type='submit' />" );
        print( printer, "</fieldset>" );
        print( printer, "</form>" );
    }

    protected void sendContentFinish( final PrintWriter printer ) {
        printer.print( "</body></html>" );
        printer.flush();
    }

    protected void sendContentStart( final PrintWriter printer ) {
        printer.print( "<html>" );
        printer.print( "<head>" );
        printer.print( "<title>page: " + this.getName() + "</title>" );
        printer.print( "</head>" );
        printer.print( "<body>" );
        printer.print( "<h1>" + getName() + "</h1>" );
        sendContentMenu( printer );
    }

    protected void sendContentMenu( final PrintWriter printer ) {
        printer.print( "<ul>" );
        for( TResource r : parent.children ) {
            printer.print( "<li><a href='" + r.getHref() + "'>" + r.getName() + "</a></li>" );
        }
        printer.print( "</ul>" );
    }

    public String processForm( Map<String, String> parameters, Map<String, FileItem> files ) {
        log.debug( "processForm: " + parameters.size() );
        for( String nm : parameters.keySet() ) {
            log.debug( " - param: " + nm );
        }
        String newName = parameters.get( "name" );
        if( newName != null ) {
            this.name = newName;
        }
        String newContent = parameters.get( "text" );
        this.text = newContent;
        this.modDate = new Date();
        return null;
    }

    public void replaceContent( InputStream in, Long length ) {
        try {
            String newContent = TFolderResource.readStream( in ).toString();
            int pos = newContent.indexOf( START_CONTENT );
            if( pos >= 0 ) {
                newContent = newContent.substring( pos + START_CONTENT.length() );
            }
            pos = newContent.indexOf( END_CONTENT );
            if( pos >= 0 ) {
                newContent = newContent.substring( 0, pos );
            }
            log.debug( "new content: " + newContent );
            this.text = newContent;
        } catch( IOException ex ) {
            throw new RuntimeException( ex );
        }

    }

    public Object getProperty( QName name ) {
        if( name.getNamespaceURI().equals( NS_EXAMPLE ) ) {
            return props.get( name.getLocalPart() );
        } else {
            return PropertyMetaData.UNKNOWN;
        }
    }

    public void setProperty( QName name, Object value ) {
        if( name.getNamespaceURI().equals( NS_EXAMPLE ) ) {
            props.put( name.getLocalPart(), (String) value );
        }
    }

    public PropertyMetaData getPropertyMetaData( QName name ) {
        if( name.getNamespaceURI().equals( NS_EXAMPLE ) ) {
            return new PropertyMetaData( PropertyAccessibility.WRITABLE, String.class );
        } else {
            return PropertyMetaData.UNKNOWN;
        }
    }

    public List<QName> getAllPropertyNames() {
        List<QName> list = new ArrayList<QName>();
        for( String key : props.keySet() ) {
            list.add( new QName( NS_EXAMPLE, key ) );
        }
        return list;
    }

    public String getText() {
        return text;
    }

    public void setText( String text ) {
        this.text = text;
    }
    
}
package com.mycompany;

import java.io.IOException;
import java.io.OutputStream;
import java.util.Map;

import com.bradmcevoy.http.Range;

/**
 *
 */
public class TTempResource extends TResource{

    public TTempResource(TFolderResource parent, String name) {
        super(parent, name);
    }

    @Override
    protected Object clone(TFolderResource newParent) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void sendContent(OutputStream out, Range range, Map<String, String> params, String contentType) throws IOException {
        // none
    }

    public String getContentType(String accepts) {
        return "";
    }

}
package com.mycompany;

import com.bradmcevoy.common.Path;
import com.bradmcevoy.http.Resource;
import com.bradmcevoy.http.ResourceFactory;


public class TResourceFactory implements ResourceFactory {

    private static org.apache.log4j.Logger log = org.apache.log4j.Logger.getLogger(TResourceFactory.class);
    
    public static final TFolderResource ROOT = new TFolderResource((TFolderResource)null,"localhost:80/webdav");
    
    static {        
        String user = "Mufasa";
        //String password = "Circle Of Life";
        String password = "pwd";

//        ROOT.setSecure(user,password);

        TFolderResource folder;
        TResource file;
        file = new TTextResource(ROOT,"index.html","Hi there");
        folder = new TFolderResource(ROOT,"folder1");
        file = new TTextResource(folder,"index.html","i am a web page in folder1");
        folder = new TFolderResource(ROOT,"folder2");
        new TFolderResource(folder,"folder2a");
        folder = new TFolderResource(ROOT,"folder3");
        TFolderResource fSpecial = new TFolderResource(ROOT,"special chars");
        TFolderResource fSpecialSub = new TFolderResource(ROOT,"folder with ampersand &");
        new TFolderResource(fSpecial,"folder with percentage %");
        new TFolderResource(fSpecial,"folder with speciï¿½l chars"); // contains ae character
        file = new TTextResource(folder,"index.html","i am a web page");
        file = new TTextResource(folder,"stuff.html","");
        folder = new TFolderResource(folder,"subfolder1");
        file = new TTextResource(folder,"index.html","");
        folder = new TFolderResource(ROOT,"secure");

        folder.setSecure(user,password);
        file = new TTextResource(folder,"index.html","");
    }
    
    
    public Resource getResource(String host, String url) {
        log.debug("getResource: url: " + url );
        Path path = Path.path(url);
        Resource r = find(path);
        log.debug("_found: " + r);
        return r;
    }

    private TResource find(Path path) {
        if( isRoot(path) ) return ROOT;
        TResource r = find(path.getParent());
        if( r == null ) return null;
        if( r instanceof TFolderResource ) {
            TFolderResource folder = (TFolderResource)r;
            for( Resource rChild : folder.getChildren() ) {
                TResource r2 = (TResource) rChild;
                if( r2.getName().equals(path.getName())) {
                    return r2;
                } else {
//                    log.debug( "IS NOT: " + r2.getName() + " - " + path.getName());
                }
            }
        }
        log.debug("not found: " + path);
        return null;
    }

    public String getSupportedLevels() {
        return "1,2";
    }

    private boolean isRoot( Path path ) {
        if( path == null ) return true;
        return ( path.getParent() == null || path.getParent().isRoot());
    }

}
package com.mycompany;

import java.io.PrintWriter;
import java.util.Date;
import java.util.UUID;

import com.bradmcevoy.http.Auth;
import com.bradmcevoy.http.CollectionResource;
import com.bradmcevoy.http.CopyableResource;
import com.bradmcevoy.http.DeletableResource;
import com.bradmcevoy.http.GetableResource;
import com.bradmcevoy.http.LockInfo;
import com.bradmcevoy.http.LockResult;
import com.bradmcevoy.http.LockTimeout;
import com.bradmcevoy.http.LockToken;
import com.bradmcevoy.http.LockableResource;
import com.bradmcevoy.http.MoveableResource;
import com.bradmcevoy.http.PropFindableResource;
import com.bradmcevoy.http.PropPatchableResource;
import com.bradmcevoy.http.Request;
import com.bradmcevoy.http.Resource;
import com.bradmcevoy.http.Utils;
import com.bradmcevoy.http.Request.Method;
import com.bradmcevoy.http.webdav.PropPatchHandler.Fields;

public abstract class TResource implements GetableResource, PropFindableResource, DeletableResource, MoveableResource,
    CopyableResource, PropPatchableResource, LockableResource
//    , DigestResource
{

    private static org.apache.log4j.Logger log = org.apache.log4j.Logger.getLogger( TResource.class );
    String name;
    Date modDate;
    Date createdDate;
    TFolderResource parent;
    TLock lock;
    String user;
    String password;

    protected abstract Object clone( TFolderResource newParent );

    public TResource( TFolderResource parent, String name ) {
        this.parent = parent;
        this.name = name;
        modDate = new Date();
        createdDate = new Date();
        if( parent != null ) {
            this.user = parent.user;
            this.password = parent.password;
            checkAndRemove( parent, name );
            parent.children.add( this );
        }
    }

    public void setSecure( String user, String password ) {
        this.user = user;
        this.password = password;
    }

    public String getHref() {
        if( parent == null ) {
            return "/webdav/";
        } else {
            String s = parent.getHref();
            if( !s.endsWith( "/" ) ) s = s + "/";
            s = s + name;
            if( this instanceof CollectionResource ) s = s + "/";
            return s;
        }
    }

    public Long getContentLength() {
        return null;
    }

    public String checkRedirect( Request request ) {
        return null;
    }

    public Long getMaxAgeSeconds( Auth auth ) {
        return (long) 10;
    }

    public void moveTo( CollectionResource rDest, String name ) {
        log.debug( "moving.." );
        TFolderResource d = (TFolderResource) rDest;
        this.parent.children.remove( this );
        this.parent = d;
        this.parent.children.add( this );
        this.name = name;
    }

    public Date getCreateDate() {
        return createdDate;
    }

    public String getName() {
        return name;
    }

    public Object authenticate( String user, String requestedPassword ) {
        log.debug( "authentication: " + user + " - " + requestedPassword + " = " + password );
        return "ok";
    }
//
//    public Object authenticate( DigestResponse digestRequest ) {
//        if( this.user == null ) {
//            log.debug( "no user defined, so allow access" );
//            return "ok";
//        }
//
//        DigestGenerator dg = new DigestGenerator();
//        String serverResponse = dg.generateDigest( digestRequest, password );
//        String clientResponse = digestRequest.getResponseDigest();
//
//        log.debug( "server resp: " + serverResponse );
//        log.debug( "given response: " + clientResponse );
//
//        if( serverResponse.equals( clientResponse ) ) {
//            return "ok";
//        } else {
//            return null;
//        }
//    }

    public boolean authorise( Request request, Method method, Auth auth ) {
        log.debug( "authorise" );
        if( auth == null ) {
            return false;

        } else {
            return true;
        }
    }

    public String getRealm() {
        return "testrealm@host.com";
    }

    public Date getModifiedDate() {
        return modDate;


    }

    public void delete() {
        if( this.parent == null )
            throw new RuntimeException( "attempt to delete root" );

        if( this.parent.children == null )
            throw new NullPointerException( "children is null" );
        this.parent.children.remove( this );
    }

    public void copyTo( CollectionResource toCollection, String name ) {
        TResource rClone;
        rClone = (TResource) this.clone( (TFolderResource) toCollection );
        rClone.name = name;
    }

    public int compareTo( Resource o ) {
        if( o instanceof TResource ) {
            TResource res = (TResource) o;
            return this.getName().compareTo( res.getName() );
        } else {
            return -1;
        }
    }

    public String getUniqueId() {
        return this.hashCode() + "";
    }

    public LockToken getCurrentLock() {
        if( this.lock == null ) return null;
        LockToken token = new LockToken();
        token.info = this.lock.lockInfo;
        token.timeout = new LockTimeout( this.lock.seconds );
        token.tokenId = this.lock.lockId;


        return token;


    }

    public LockResult lock( LockTimeout timeout, LockInfo lockInfo ) {
//        if( lock != null ) {
//            // todo
//            throw new RuntimeException("already locked");
//        }

        LockTimeout.DateAndSeconds lockedUntil = timeout.getLockedUntil( 60l, 3600l );

        this.lock = new TLock( lockedUntil.date, UUID.randomUUID().toString(), lockedUntil.seconds, lockInfo );

        LockToken token = new LockToken();
        token.info = lockInfo;
        token.timeout = new LockTimeout( lockedUntil.seconds );
        token.tokenId = this.lock.lockId;

        return LockResult.success( token );
    }

    public LockResult refreshLock( String token ) {
        if( lock == null ) throw new RuntimeException( "not locked" );
        if( !lock.lockId.equals( token ) )
            throw new RuntimeException( "invalid lock id" );
        this.lock = lock.refresh();
        LockToken tok = makeToken();
        return LockResult.success( tok );
    }

    public void unlock( String tokenId ) {
        if( lock == null ) {
            log.warn( "request to unlock not locked resource" );
            return;
        }
        if( !lock.lockId.equals( tokenId ) )
            throw new RuntimeException( "Invalid lock token" );
        this.lock = null;
    }

    LockToken makeToken() {
        LockToken token = new LockToken();
        token.info = lock.lockInfo;
        token.timeout = new LockTimeout( lock.seconds );
        token.tokenId = lock.lockId;
        return token;
    }

    private void checkAndRemove( TFolderResource parent, String name ) {
        TResource r = (TResource) parent.child( name );
        if( r != null ) parent.children.remove( r );
    }

    /**
     * This is required for the PropPatchableResource interface, but should
     * not be implemented.
     *
     * Implement CustomPropertyResource or MultiNamespaceCustomPropertyResource instead
     *
     * @param fields
     */
    public void setProperties( Fields fields ) {
    }

    protected void print( PrintWriter printer, String s ) {
        printer.print( s );
    }

    class TLock {

        final Date lockedUntil;
        final String lockId;
        final long seconds;
        final LockInfo lockInfo;

        public TLock( Date lockedUntil, String lockId, long seconds, LockInfo lockInfo ) {
            this.lockedUntil = lockedUntil;
            this.lockId = lockId;
            this.seconds = seconds;
            this.lockInfo = lockInfo;
        }

        TLock refresh() {
            Date dt = Utils.addSeconds( Utils.now(), seconds );
            return new TLock( dt, lockId, seconds, lockInfo );
        }
    }
}
package com.mycompany;

import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.apache.commons.io.output.ByteArrayOutputStream;

import com.bradmcevoy.http.CollectionResource;
import com.bradmcevoy.http.FileItem;
import com.bradmcevoy.http.LockInfo;
import com.bradmcevoy.http.LockResult;
import com.bradmcevoy.http.LockTimeout;
import com.bradmcevoy.http.LockToken;
import com.bradmcevoy.http.LockingCollectionResource;
import com.bradmcevoy.http.MakeCollectionableResource;
import com.bradmcevoy.http.PutableResource;
import com.bradmcevoy.http.Request;
import com.bradmcevoy.http.Resource;
import com.bradmcevoy.http.Utils;
import com.bradmcevoy.io.StreamUtils;

public class TFolderResource extends TTextResource implements PutableResource, MakeCollectionableResource, LockingCollectionResource {
    private static org.apache.log4j.Logger log = org.apache.log4j.Logger.getLogger(TResource.class);
    
    ArrayList<TResource> children = new ArrayList<TResource>();
    
    public TFolderResource(TFolderResource parent, String name) {
        super(parent,name,"");
        log.debug( "created new folder: " + name);
    }
    
    @Override
    public Long getContentLength() {
        return null;
    }
    
    public String getContentType() {
        return null;
    }
    
    @Override
    public String checkRedirect(Request request) {
        return null;
    }
    
    public List<? extends Resource> getChildren() {
        return children;
    }
    
    @Override
    protected void sendContentMiddle(final PrintWriter printer) {
        super.sendContentMiddle(printer);
        printer.print("file upload field");
        printer.print("<form method='POST' enctype='multipart/form-data' action='" + this.getHref() + "'>");
        printer.print("<input type='file' name='file1' /><input type='submit'>");
        printer.print("</form>");
    }
    
    @Override
    protected void sendContentMenu(final PrintWriter printer) {
        printer.print("<ul>");
        for( TResource r : children ) {
            String href = Utils.escapeXml(r.getHref());
            String n = Utils.escapeXml(r.getName());
            print(printer, "<li><a href='" + href + "'>" + n + "</a>");
        }
        printer.print("</ul>");
    }
    
    
    @Override
    protected Object clone() throws CloneNotSupportedException {
        TFolderResource r = new TFolderResource(parent,name);
        for( TResource child : children ) {
            child.clone(r); // cstr adds to children
        }
        return r;
    }
    
    static ByteArrayOutputStream readStream(final InputStream in) throws IOException {
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        StreamUtils.readTo(in, bos);
        return bos;
    }
    
    public CollectionResource createCollection(String newName) {
        log.debug( "createCollection: " + newName);
        TFolderResource r = new TFolderResource(this,newName);
        return r;
    }
    
    @Override
    public String processForm(Map<String, String> params, Map<String, com.bradmcevoy.http.FileItem> files) {
        super.processForm(params,files);
        log.debug( "folder processform");
        for( FileItem fitem : files.values()) {
            log.debug("found file: " + fitem.getName());
            ByteArrayOutputStream bos;
            try {
                bos = readStream(fitem.getInputStream());
            } catch (IOException ex) {
                log.error("error reading stream: ",ex );
                return null;
            }
            new TBinaryResource(this,fitem.getName(),bos.toByteArray(),null); // todo: infer content type from extension
        }
        return null;
    }

    public Resource createNew(String newName, InputStream inputStream, Long length, String contentType) throws IOException {
        ByteArrayOutputStream bos = readStream(inputStream);
        log.debug("createNew: " + bos.size() + " - name: " + newName + " current child count: " + this.children.size());

        TResource r = new TBinaryResource(this,newName, bos.toByteArray(), contentType);
        log.debug("new child count: " + this.children.size());
        return r;
    }

    public Resource child(String childName) {
        for( Resource r : getChildren() ) {
            if( r.getName().equals(childName)) return r;
        }
        return null;
    }

    public LockToken createAndLock(String name, LockTimeout timeout, LockInfo lockInfo) {
        TTempResource temp = new TTempResource(this, name);
        LockResult r = temp.lock(timeout, lockInfo);
        if( r.isSuccessful() ) {
            return r.getLockToken();
        } else {
            throw new RuntimeException("didnt lock");
        }
    }
    
}
package com.mycompany;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

import org.apache.commons.io.output.ByteArrayOutputStream;

import com.bradmcevoy.http.CustomProperty;
import com.bradmcevoy.http.CustomPropertyResource;
import com.bradmcevoy.http.Range;
import com.bradmcevoy.http.ReplaceableResource;

/**
 * Holds binary files like PDFs, jpeg, etc
 *
 * Demonstrates implementing CustomPropertyResource
 *
 * @author brad
 */
public class TBinaryResource extends TResource implements CustomPropertyResource, ReplaceableResource {

    private static org.apache.log4j.Logger log = org.apache.log4j.Logger.getLogger(TBinaryResource.class);
    byte[] bytes;
    String contentType;
    private Map<String, String> props = new HashMap<String, String>();

    public TBinaryResource(TFolderResource parent, String name, byte[] bytes, String contentType) {
        super(parent, name);
        this.bytes = bytes;
        props.put("someField", "hash:" + this.hashCode());
    }

    @Override
    protected Object clone(TFolderResource newParent) {
        return new TBinaryResource(newParent, name, bytes, contentType);
    }

    @Override
    public void sendContent(OutputStream out, Range range, Map<String, String> params, String contentType) throws IOException {
        System.out.println("writing binary resource:");
        out.write(bytes);
        System.out.println("wrote bytes: " + bytes.length);
    }

    @Override
    public Long getContentLength() {
        return (long) bytes.length;
    }

    @Override
    public String getContentType(String accept) {
        return contentType;
    }

    public CustomProperty getProperty(String name) {
        if (props.containsKey(name)) {
            return new TResCustomProperty(name);
        } else {
            return null;
        }
    }

    public String getNameSpaceURI() {
        return "http://milton.ettrema.com/demo";
    }

    public Set<String> getAllPropertyNames() {
        return this.props.keySet();
    }

    public void replaceContent(InputStream in, Long length) {
        try {
            ByteArrayOutputStream bos = TFolderResource.readStream(in);
            byte[] newBytes = bos.toByteArray();
            if (length != null) {
                if (newBytes.length != length) {
                    throw new RuntimeException("data corruption. data does not equal expected content length");
                }
            }
            this.bytes = newBytes;
        } catch (IOException ex) {
            throw new RuntimeException(ex);
        }

    }

    public class TResCustomProperty implements CustomProperty {

        private final String key;

        public TResCustomProperty(String key) {
            this.key = key;
        }

        public Object getTypedValue() {
            return props.get(key);
        }

        public String getFormattedValue() {
            return props.get(key);
        }

        public void setFormattedValue(String s) {
            log.debug("set value: " + key + " to: " + s);
            props.put(key, s);
        }

        public Class getValueClass() {
            return String.class;
        }
    }
}
package com.mycompany;

import java.io.IOException;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.bradmcevoy.http.HttpManager;
import com.bradmcevoy.http.Request;
import com.bradmcevoy.http.Response;
import com.bradmcevoy.http.ServletRequest;
import com.bradmcevoy.http.ServletResponse;



/**
 * This filter demonstrates how you can easily write your own servlet filter
 * to invoke milton
 *
 * Using this approach allows you to mix non-milton resources. This example
 * shows the filter bypassing milton for JSP files, but allowing milton
 * to handle all other requests.
 *
 * You can also use StaticResourceFilter
 *
 * @author brad
 */
public class CustomFilter implements javax.servlet.Filter {

    private static org.apache.log4j.Logger log = org.apache.log4j.Logger.getLogger(CustomFilter.class);

    private HttpManager httpManager;

    public void init( FilterConfig filterConfig ) throws ServletException {
        TResourceFactory fact = new TResourceFactory();
        httpManager = new HttpManager( fact );
    }

    public void doFilter( javax.servlet.ServletRequest servletRequest, javax.servlet.ServletResponse servletResponse, FilterChain chain ) throws IOException, ServletException {
        log.debug( "doFilter");
        HttpServletRequest req = (HttpServletRequest) servletRequest;
        HttpServletResponse resp = (HttpServletResponse) servletResponse;

        String url = null;
        url = ( (HttpServletRequest) servletRequest ).getRequestURL().toString();
        if( !url.endsWith( ".jsp") ) {
            log.debug( "not a JSP, use milton");
            try {
                Request request = new ServletRequest( req );
                Response response = new ServletResponse( resp );
                httpManager.process( request, response );
            } finally {
                servletResponse.getOutputStream().flush();
                servletResponse.flushBuffer();
            }
        } else {
            log.debug( "is a JSP, do not use milton");
            chain.doFilter( servletRequest, servletResponse );
        }

    }

    public void destroy() {

    }
}
package com.mycompany;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.xml.namespace.QName;

import com.bradmcevoy.http.FileItem;
import com.bradmcevoy.http.PostableResource;
import com.bradmcevoy.http.Range;
import com.bradmcevoy.http.ReplaceableResource;
import com.bradmcevoy.http.Response;
import com.bradmcevoy.property.BeanPropertyResource;
import com.bradmcevoy.property.MultiNamespaceCustomPropertyResource;
import com.bradmcevoy.property.PropertySource.PropertyAccessibility;
import com.bradmcevoy.property.PropertySource.PropertyMetaData;



/**
 * Demonstrates implementing:
 *   - MultiNamespaceCustomPropertyResource - for getting and setting custom properties
 *   - BeanPropertyResource - showing how to edit bean properties
 *   - ReplaceableResource - for replacing content on PUTs to existing resources
 *   - PostableResource - for form processing
 *
 */
// This annotation allows us to edit the text property
@BeanPropertyResource("http://milton.ettrema.com/demo/beanprop") 
public class TTextResource extends TResource implements PostableResource, ReplaceableResource, MultiNamespaceCustomPropertyResource {

    private static org.apache.log4j.Logger log = org.apache.log4j.Logger.getLogger( TTextResource.class );
    private static final String START_CONTENT = "<textarea name=\"text\" cols=\"60\" rows=\"20\">";
    private static final String END_CONTENT = "</textarea>";
    private static final String NS_EXAMPLE = "http://milton.ettrema.com/demo/multins";
    private String text;
    private Map<String, String> props = new HashMap<String, String>();

    public TTextResource( TFolderResource parent, String name, String text ) {
        super( parent, name );
        this.text = text;
        props.put( "helloWorldProperty", "i am " + name );
    }

    @Override
    protected Object clone( TFolderResource newParent ) {
        return new TTextResource( newParent, name, text );
    }

    public String getContentType( String accept ) {
        return Response.ContentType.HTTP.toString();
    }

    public void sendContent( OutputStream out, Range range, Map<String, String> params, String contentType ) throws IOException {
        PrintWriter printer = new PrintWriter( out, true );
        sendContentStart( printer );
        sendContentMiddle( printer );
        sendContentFinish( printer );
    }

    protected void sendContentMiddle( final PrintWriter printer ) {
        print( printer, "<form method='post' action='" + this.getHref() + "'>" );
        print( printer, "<fieldset>" );
        print( printer, "<input type='text' name='name' value='" + this.getName() + "'/>" );
        print( printer, "<br/>" );
        printer.print( START_CONTENT );
        print( printer, text );
        printer.print( END_CONTENT );
        print( printer, "<br/>" );
        printer.print( "<input type='submit' />" );
        print( printer, "</fieldset>" );
        print( printer, "</form>" );
    }

    protected void sendContentFinish( final PrintWriter printer ) {
        printer.print( "</body></html>" );
        printer.flush();
    }

    protected void sendContentStart( final PrintWriter printer ) {
        printer.print( "<html>" );
        printer.print( "<head>" );
        printer.print( "<title>page: " + this.getName() + "</title>" );
        printer.print( "</head>" );
        printer.print( "<body>" );
        printer.print( "<h1>" + getName() + "</h1>" );
        sendContentMenu( printer );
    }

    protected void sendContentMenu( final PrintWriter printer ) {
        printer.print( "<ul>" );
        for( TResource r : parent.children ) {
            printer.print( "<li><a href='" + r.getHref() + "'>" + r.getName() + "</a></li>" );
        }
        printer.print( "</ul>" );
    }

    public String processForm( Map<String, String> parameters, Map<String, FileItem> files ) {
        log.debug( "processForm: " + parameters.size() );
        for( String nm : parameters.keySet() ) {
            log.debug( " - param: " + nm );
        }
        String newName = parameters.get( "name" );
        if( newName != null ) {
            this.name = newName;
        }
        String newContent = parameters.get( "text" );
        this.text = newContent;
        this.modDate = new Date();
        return null;
    }

    public void replaceContent( InputStream in, Long length ) {
        try {
            String newContent = TFolderResource.readStream( in ).toString();
            int pos = newContent.indexOf( START_CONTENT );
            if( pos >= 0 ) {
                newContent = newContent.substring( pos + START_CONTENT.length() );
            }
            pos = newContent.indexOf( END_CONTENT );
            if( pos >= 0 ) {
                newContent = newContent.substring( 0, pos );
            }
            log.debug( "new content: " + newContent );
            this.text = newContent;
        } catch( IOException ex ) {
            throw new RuntimeException( ex );
        }

    }

    public Object getProperty( QName name ) {
        if( name.getNamespaceURI().equals( NS_EXAMPLE ) ) {
            return props.get( name.getLocalPart() );
        } else {
            return PropertyMetaData.UNKNOWN;
        }
    }

    public void setProperty( QName name, Object value ) {
        if( name.getNamespaceURI().equals( NS_EXAMPLE ) ) {
            props.put( name.getLocalPart(), (String) value );
        }
    }

    public PropertyMetaData getPropertyMetaData( QName name ) {
        if( name.getNamespaceURI().equals( NS_EXAMPLE ) ) {
            return new PropertyMetaData( PropertyAccessibility.WRITABLE, String.class );
        } else {
            return PropertyMetaData.UNKNOWN;
        }
    }

    public List<QName> getAllPropertyNames() {
        List<QName> list = new ArrayList<QName>();
        for( String key : props.keySet() ) {
            list.add( new QName( NS_EXAMPLE, key ) );
        }
        return list;
    }

    public String getText() {
        return text;
    }

    public void setText( String text ) {
        this.text = text;
    }
    
}
package com.mycompany;

import java.io.IOException;
import java.io.OutputStream;
import java.util.Map;

import com.bradmcevoy.http.Range;

/**
 *
 */
public class TTempResource extends TResource{

    public TTempResource(TFolderResource parent, String name) {
        super(parent, name);
    }

    @Override
    protected Object clone(TFolderResource newParent) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void sendContent(OutputStream out, Range range, Map<String, String> params, String contentType) throws IOException {
        // none
    }

    public String getContentType(String accepts) {
        return "";
    }

}
package com.mycompany;

import com.bradmcevoy.common.Path;
import com.bradmcevoy.http.Resource;
import com.bradmcevoy.http.ResourceFactory;


public class TResourceFactory implements ResourceFactory {

    private static org.apache.log4j.Logger log = org.apache.log4j.Logger.getLogger(TResourceFactory.class);
    
    public static final TFolderResource ROOT = new TFolderResource((TFolderResource)null,"localhost:80/webdav");
    
    static {        
        String user = "Mufasa";
        //String password = "Circle Of Life";
        String password = "pwd";

//        ROOT.setSecure(user,password);

        TFolderResource folder;
        TResource file;
        file = new TTextResource(ROOT,"index.html","Hi there");
        folder = new TFolderResource(ROOT,"folder1");
        file = new TTextResource(folder,"index.html","i am a web page in folder1");
        folder = new TFolderResource(ROOT,"folder2");
        new TFolderResource(folder,"folder2a");
        folder = new TFolderResource(ROOT,"folder3");
        TFolderResource fSpecial = new TFolderResource(ROOT,"special chars");
        TFolderResource fSpecialSub = new TFolderResource(ROOT,"folder with ampersand &");
        new TFolderResource(fSpecial,"folder with percentage %");
        new TFolderResource(fSpecial,"folder with speciï¿½l chars"); // contains ae character
        file = new TTextResource(folder,"index.html","i am a web page");
        file = new TTextResource(folder,"stuff.html","");
        folder = new TFolderResource(folder,"subfolder1");
        file = new TTextResource(folder,"index.html","");
        folder = new TFolderResource(ROOT,"secure");

        folder.setSecure(user,password);
        file = new TTextResource(folder,"index.html","");
    }
    
    
    public Resource getResource(String host, String url) {
        log.debug("getResource: url: " + url );
        Path path = Path.path(url);
        Resource r = find(path);
        log.debug("_found: " + r);
        return r;
    }

    private TResource find(Path path) {
        if( isRoot(path) ) return ROOT;
        TResource r = find(path.getParent());
        if( r == null ) return null;
        if( r instanceof TFolderResource ) {
            TFolderResource folder = (TFolderResource)r;
            for( Resource rChild : folder.getChildren() ) {
                TResource r2 = (TResource) rChild;
                if( r2.getName().equals(path.getName())) {
                    return r2;
                } else {
//                    log.debug( "IS NOT: " + r2.getName() + " - " + path.getName());
                }
            }
        }
        log.debug("not found: " + path);
        return null;
    }

    public String getSupportedLevels() {
        return "1,2";
    }

    private boolean isRoot( Path path ) {
        if( path == null ) return true;
        return ( path.getParent() == null || path.getParent().isRoot());
    }

}
package com.mycompany;

import java.io.PrintWriter;
import java.util.Date;
import java.util.UUID;

import com.bradmcevoy.http.Auth;
import com.bradmcevoy.http.CollectionResource;
import com.bradmcevoy.http.CopyableResource;
import com.bradmcevoy.http.DeletableResource;
import com.bradmcevoy.http.GetableResource;
import com.bradmcevoy.http.LockInfo;
import com.bradmcevoy.http.LockResult;
import com.bradmcevoy.http.LockTimeout;
import com.bradmcevoy.http.LockToken;
import com.bradmcevoy.http.LockableResource;
import com.bradmcevoy.http.MoveableResource;
import com.bradmcevoy.http.PropFindableResource;
import com.bradmcevoy.http.PropPatchableResource;
import com.bradmcevoy.http.Request;
import com.bradmcevoy.http.Resource;
import com.bradmcevoy.http.Utils;
import com.bradmcevoy.http.Request.Method;
import com.bradmcevoy.http.webdav.PropPatchHandler.Fields;

public abstract class TResource implements GetableResource, PropFindableResource, DeletableResource, MoveableResource,
    CopyableResource, PropPatchableResource, LockableResource
//    , DigestResource
{

    private static org.apache.log4j.Logger log = org.apache.log4j.Logger.getLogger( TResource.class );
    String name;
    Date modDate;
    Date createdDate;
    TFolderResource parent;
    TLock lock;
    String user;
    String password;

    protected abstract Object clone( TFolderResource newParent );

    public TResource( TFolderResource parent, String name ) {
        this.parent = parent;
        this.name = name;
        modDate = new Date();
        createdDate = new Date();
        if( parent != null ) {
            this.user = parent.user;
            this.password = parent.password;
            checkAndRemove( parent, name );
            parent.children.add( this );
        }
    }

    public void setSecure( String user, String password ) {
        this.user = user;
        this.password = password;
    }

    public String getHref() {
        if( parent == null ) {
            return "/webdav/";
        } else {
            String s = parent.getHref();
            if( !s.endsWith( "/" ) ) s = s + "/";
            s = s + name;
            if( this instanceof CollectionResource ) s = s + "/";
            return s;
        }
    }

    public Long getContentLength() {
        return null;
    }

    public String checkRedirect( Request request ) {
        return null;
    }

    public Long getMaxAgeSeconds( Auth auth ) {
        return (long) 10;
    }

    public void moveTo( CollectionResource rDest, String name ) {
        log.debug( "moving.." );
        TFolderResource d = (TFolderResource) rDest;
        this.parent.children.remove( this );
        this.parent = d;
        this.parent.children.add( this );
        this.name = name;
    }

    public Date getCreateDate() {
        return createdDate;
    }

    public String getName() {
        return name;
    }

    public Object authenticate( String user, String requestedPassword ) {
        log.debug( "authentication: " + user + " - " + requestedPassword + " = " + password );
        return "ok";
    }
//
//    public Object authenticate( DigestResponse digestRequest ) {
//        if( this.user == null ) {
//            log.debug( "no user defined, so allow access" );
//            return "ok";
//        }
//
//        DigestGenerator dg = new DigestGenerator();
//        String serverResponse = dg.generateDigest( digestRequest, password );
//        String clientResponse = digestRequest.getResponseDigest();
//
//        log.debug( "server resp: " + serverResponse );
//        log.debug( "given response: " + clientResponse );
//
//        if( serverResponse.equals( clientResponse ) ) {
//            return "ok";
//        } else {
//            return null;
//        }
//    }

    public boolean authorise( Request request, Method method, Auth auth ) {
        log.debug( "authorise" );
        if( auth == null ) {
            return false;

        } else {
            return true;
        }
    }

    public String getRealm() {
        return "testrealm@host.com";
    }

    public Date getModifiedDate() {
        return modDate;


    }

    public void delete() {
        if( this.parent == null )
            throw new RuntimeException( "attempt to delete root" );

        if( this.parent.children == null )
            throw new NullPointerException( "children is null" );
        this.parent.children.remove( this );
    }

    public void copyTo( CollectionResource toCollection, String name ) {
        TResource rClone;
        rClone = (TResource) this.clone( (TFolderResource) toCollection );
        rClone.name = name;
    }

    public int compareTo( Resource o ) {
        if( o instanceof TResource ) {
            TResource res = (TResource) o;
            return this.getName().compareTo( res.getName() );
        } else {
            return -1;
        }
    }

    public String getUniqueId() {
        return this.hashCode() + "";
    }

    public LockToken getCurrentLock() {
        if( this.lock == null ) return null;
        LockToken token = new LockToken();
        token.info = this.lock.lockInfo;
        token.timeout = new LockTimeout( this.lock.seconds );
        token.tokenId = this.lock.lockId;


        return token;


    }

    public LockResult lock( LockTimeout timeout, LockInfo lockInfo ) {
//        if( lock != null ) {
//            // todo
//            throw new RuntimeException("already locked");
//        }

        LockTimeout.DateAndSeconds lockedUntil = timeout.getLockedUntil( 60l, 3600l );

        this.lock = new TLock( lockedUntil.date, UUID.randomUUID().toString(), lockedUntil.seconds, lockInfo );

        LockToken token = new LockToken();
        token.info = lockInfo;
        token.timeout = new LockTimeout( lockedUntil.seconds );
        token.tokenId = this.lock.lockId;

        return LockResult.success( token );
    }

    public LockResult refreshLock( String token ) {
        if( lock == null ) throw new RuntimeException( "not locked" );
        if( !lock.lockId.equals( token ) )
            throw new RuntimeException( "invalid lock id" );
        this.lock = lock.refresh();
        LockToken tok = makeToken();
        return LockResult.success( tok );
    }

    public void unlock( String tokenId ) {
        if( lock == null ) {
            log.warn( "request to unlock not locked resource" );
            return;
        }
        if( !lock.lockId.equals( tokenId ) )
            throw new RuntimeException( "Invalid lock token" );
        this.lock = null;
    }

    LockToken makeToken() {
        LockToken token = new LockToken();
        token.info = lock.lockInfo;
        token.timeout = new LockTimeout( lock.seconds );
        token.tokenId = lock.lockId;
        return token;
    }

    private void checkAndRemove( TFolderResource parent, String name ) {
        TResource r = (TResource) parent.child( name );
        if( r != null ) parent.children.remove( r );
    }

    /**
     * This is required for the PropPatchableResource interface, but should
     * not be implemented.
     *
     * Implement CustomPropertyResource or MultiNamespaceCustomPropertyResource instead
     *
     * @param fields
     */
    public void setProperties( Fields fields ) {
    }

    protected void print( PrintWriter printer, String s ) {
        printer.print( s );
    }

    class TLock {

        final Date lockedUntil;
        final String lockId;
        final long seconds;
        final LockInfo lockInfo;

        public TLock( Date lockedUntil, String lockId, long seconds, LockInfo lockInfo ) {
            this.lockedUntil = lockedUntil;
            this.lockId = lockId;
            this.seconds = seconds;
            this.lockInfo = lockInfo;
        }

        TLock refresh() {
            Date dt = Utils.addSeconds( Utils.now(), seconds );
            return new TLock( dt, lockId, seconds, lockInfo );
        }
    }
}
package com.mycompany;

import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.apache.commons.io.output.ByteArrayOutputStream;

import com.bradmcevoy.http.CollectionResource;
import com.bradmcevoy.http.FileItem;
import com.bradmcevoy.http.LockInfo;
import com.bradmcevoy.http.LockResult;
import com.bradmcevoy.http.LockTimeout;
import com.bradmcevoy.http.LockToken;
import com.bradmcevoy.http.LockingCollectionResource;
import com.bradmcevoy.http.MakeCollectionableResource;
import com.bradmcevoy.http.PutableResource;
import com.bradmcevoy.http.Request;
import com.bradmcevoy.http.Resource;
import com.bradmcevoy.http.Utils;
import com.bradmcevoy.io.StreamUtils;

public class TFolderResource extends TTextResource implements PutableResource, MakeCollectionableResource, LockingCollectionResource {
    private static org.apache.log4j.Logger log = org.apache.log4j.Logger.getLogger(TResource.class);
    
    ArrayList<TResource> children = new ArrayList<TResource>();
    
    public TFolderResource(TFolderResource parent, String name) {
        super(parent,name,"");
        log.debug( "created new folder: " + name);
    }
    
    @Override
    public Long getContentLength() {
        return null;
    }
    
    public String getContentType() {
        return null;
    }
    
    @Override
    public String checkRedirect(Request request) {
        return null;
    }
    
    public List<? extends Resource> getChildren() {
        return children;
    }
    
    @Override
    protected void sendContentMiddle(final PrintWriter printer) {
        super.sendContentMiddle(printer);
        printer.print("file upload field");
        printer.print("<form method='POST' enctype='multipart/form-data' action='" + this.getHref() + "'>");
        printer.print("<input type='file' name='file1' /><input type='submit'>");
        printer.print("</form>");
    }
    
    @Override
    protected void sendContentMenu(final PrintWriter printer) {
        printer.print("<ul>");
        for( TResource r : children ) {
            String href = Utils.escapeXml(r.getHref());
            String n = Utils.escapeXml(r.getName());
            print(printer, "<li><a href='" + href + "'>" + n + "</a>");
        }
        printer.print("</ul>");
    }
    
    
    @Override
    protected Object clone() throws CloneNotSupportedException {
        TFolderResource r = new TFolderResource(parent,name);
        for( TResource child : children ) {
            child.clone(r); // cstr adds to children
        }
        return r;
    }
    
    static ByteArrayOutputStream readStream(final InputStream in) throws IOException {
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        StreamUtils.readTo(in, bos);
        return bos;
    }
    
    public CollectionResource createCollection(String newName) {
        log.debug( "createCollection: " + newName);
        TFolderResource r = new TFolderResource(this,newName);
        return r;
    }
    
    @Override
    public String processForm(Map<String, String> params, Map<String, com.bradmcevoy.http.FileItem> files) {
        super.processForm(params,files);
        log.debug( "folder processform");
        for( FileItem fitem : files.values()) {
            log.debug("found file: " + fitem.getName());
            ByteArrayOutputStream bos;
            try {
                bos = readStream(fitem.getInputStream());
            } catch (IOException ex) {
                log.error("error reading stream: ",ex );
                return null;
            }
            new TBinaryResource(this,fitem.getName(),bos.toByteArray(),null); // todo: infer content type from extension
        }
        return null;
    }

    public Resource createNew(String newName, InputStream inputStream, Long length, String contentType) throws IOException {
        ByteArrayOutputStream bos = readStream(inputStream);
        log.debug("createNew: " + bos.size() + " - name: " + newName + " current child count: " + this.children.size());

        TResource r = new TBinaryResource(this,newName, bos.toByteArray(), contentType);
        log.debug("new child count: " + this.children.size());
        return r;
    }

    public Resource child(String childName) {
        for( Resource r : getChildren() ) {
            if( r.getName().equals(childName)) return r;
        }
        return null;
    }

    public LockToken createAndLock(String name, LockTimeout timeout, LockInfo lockInfo) {
        TTempResource temp = new TTempResource(this, name);
        LockResult r = temp.lock(timeout, lockInfo);
        if( r.isSuccessful() ) {
            return r.getLockToken();
        } else {
            throw new RuntimeException("didnt lock");
        }
    }
    
}
package com.mycompany;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

import org.apache.commons.io.output.ByteArrayOutputStream;

import com.bradmcevoy.http.CustomProperty;
import com.bradmcevoy.http.CustomPropertyResource;
import com.bradmcevoy.http.Range;
import com.bradmcevoy.http.ReplaceableResource;

/**
 * Holds binary files like PDFs, jpeg, etc
 *
 * Demonstrates implementing CustomPropertyResource
 *
 * @author brad
 */
public class TBinaryResource extends TResource implements CustomPropertyResource, ReplaceableResource {

    private static org.apache.log4j.Logger log = org.apache.log4j.Logger.getLogger(TBinaryResource.class);
    byte[] bytes;
    String contentType;
    private Map<String, String> props = new HashMap<String, String>();

    public TBinaryResource(TFolderResource parent, String name, byte[] bytes, String contentType) {
        super(parent, name);
        this.bytes = bytes;
        props.put("someField", "hash:" + this.hashCode());
    }

    @Override
    protected Object clone(TFolderResource newParent) {
        return new TBinaryResource(newParent, name, bytes, contentType);
    }

    @Override
    public void sendContent(OutputStream out, Range range, Map<String, String> params, String contentType) throws IOException {
        System.out.println("writing binary resource:");
        out.write(bytes);
        System.out.println("wrote bytes: " + bytes.length);
    }

    @Override
    public Long getContentLength() {
        return (long) bytes.length;
    }

    @Override
    public String getContentType(String accept) {
        return contentType;
    }

    public CustomProperty getProperty(String name) {
        if (props.containsKey(name)) {
            return new TResCustomProperty(name);
        } else {
            return null;
        }
    }

    public String getNameSpaceURI() {
        return "http://milton.ettrema.com/demo";
    }

    public Set<String> getAllPropertyNames() {
        return this.props.keySet();
    }

    public void replaceContent(InputStream in, Long length) {
        try {
            ByteArrayOutputStream bos = TFolderResource.readStream(in);
            byte[] newBytes = bos.toByteArray();
            if (length != null) {
                if (newBytes.length != length) {
                    throw new RuntimeException("data corruption. data does not equal expected content length");
                }
            }
            this.bytes = newBytes;
        } catch (IOException ex) {
            throw new RuntimeException(ex);
        }

    }

    public class TResCustomProperty implements CustomProperty {

        private final String key;

        public TResCustomProperty(String key) {
            this.key = key;
        }

        public Object getTypedValue() {
            return props.get(key);
        }

        public String getFormattedValue() {
            return props.get(key);
        }

        public void setFormattedValue(String s) {
            log.debug("set value: " + key + " to: " + s);
            props.put(key, s);
        }

        public Class getValueClass() {
            return String.class;
        }
    }
}
package com.mycompany;

import java.io.IOException;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.bradmcevoy.http.HttpManager;
import com.bradmcevoy.http.Request;
import com.bradmcevoy.http.Response;
import com.bradmcevoy.http.ServletRequest;
import com.bradmcevoy.http.ServletResponse;



/**
 * This filter demonstrates how you can easily write your own servlet filter
 * to invoke milton
 *
 * Using this approach allows you to mix non-milton resources. This example
 * shows the filter bypassing milton for JSP files, but allowing milton
 * to handle all other requests.
 *
 * You can also use StaticResourceFilter
 *
 * @author brad
 */
public class CustomFilter implements javax.servlet.Filter {

    private static org.apache.log4j.Logger log = org.apache.log4j.Logger.getLogger(CustomFilter.class);

    private HttpManager httpManager;

    public void init( FilterConfig filterConfig ) throws ServletException {
        TResourceFactory fact = new TResourceFactory();
        httpManager = new HttpManager( fact );
    }

    public void doFilter( javax.servlet.ServletRequest servletRequest, javax.servlet.ServletResponse servletResponse, FilterChain chain ) throws IOException, ServletException {
        log.debug( "doFilter");
        HttpServletRequest req = (HttpServletRequest) servletRequest;
        HttpServletResponse resp = (HttpServletResponse) servletResponse;

        String url = null;
        url = ( (HttpServletRequest) servletRequest ).getRequestURL().toString();
        if( !url.endsWith( ".jsp") ) {
            log.debug( "not a JSP, use milton");
            try {
                Request request = new ServletRequest( req );
                Response response = new ServletResponse( resp );
                httpManager.process( request, response );
            } finally {
                servletResponse.getOutputStream().flush();
                servletResponse.flushBuffer();
            }
        } else {
            log.debug( "is a JSP, do not use milton");
            chain.doFilter( servletRequest, servletResponse );
        }

    }

    public void destroy() {

    }
}
