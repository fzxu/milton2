<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd">


    <bean id="milton.resource.factory" class="com.bradmcevoy.http.MultipleResourceFactory">
        <constructor-arg>
            <list>
                <ref bean="console.resource.factory"/>
                <ref bean="static.resource.factory"/>
                <ref bean="json.resource.factory"/>
            </list>
        </constructor-arg>
    </bean>

    <bean id="static.resource.factory" class="com.bradmcevoy.http.StaticResourceFactory">
        <constructor-arg value="webdav"/>
        <constructor-arg value="src/main/webapp"/>
    </bean>

    <bean id="milton.resource.type.helper" class="com.bradmcevoy.http.webdav.WebDavResourceTypeHelper"/>

    <!-- property sources defined explicitly so we can inject quota manager-->
    <bean id="milton.property.sources" class="com.bradmcevoy.http.webdav.PropertySourcesList">
        <constructor-arg ref="milton.resource.type.helper"/>
    </bean>

    <bean id="milton.prop.patcher" class="com.bradmcevoy.http.webdav.PropertySourcePatchSetter">
        <constructor-arg ref="milton.property.sources"/>
    </bean>

    <bean id="permissions.authoriser" class="com.bradmcevoy.property.DefaultPropertyAuthoriser"/>

    <bean id="event.manager" class="com.ettrema.event.EventManagerImpl"/>

    <bean id="json.resource.factory" class="com.ettrema.json.JsonResourceFactory">
        <constructor-arg ref="filesystem.resource.factory"/>
        <constructor-arg ref="milton.property.sources"/>
        <constructor-arg ref="milton.prop.patcher"/>
        <constructor-arg ref="permissions.authoriser"/>
        <constructor-arg ref="event.manager"/>
    </bean>


    <bean id="console.resource.factory" class="com.ettrema.console.ConsoleResourceFactory">
        <constructor-arg ref="zsync.resource.factory" />
        <constructor-arg value="/webdav/console" />
        <constructor-arg value="/webdav" /> <!-- resource to test authentication against = host root -->
        <constructor-arg>
            <list>
                <bean class="com.ettrema.console.LsFactory" />
                <bean class="com.ettrema.console.CdFactory" />
                <bean class="com.ettrema.console.RmFactory" />
                <bean class="com.ettrema.console.HelpFactory" />
                <bean class="com.ettrema.console.CpFactory" />
                <bean class="com.ettrema.console.MkFactory" />
                <bean class="com.ettrema.console.MkdirFactory" />
            </list>
        </constructor-arg>
        <constructor-arg value="webdav"/> <!-- the web context path -->
    </bean>

	<bean id="zsync.resource.factory" class="com.ettrema.zsync.ZSyncResourceFactory">
		<constructor-arg ref="filesystem.resource.factory" /> 
	</bean>

    <bean id="filesystem.resource.factory" class="com.ettrema.http.fs.FileSystemResourceFactory">
        <property name="securityManager" ref="milton.fs.security.manager" />
        <property name="lockManager" ref="milton.fs.lock.manager" />
        <property name="maxAgeSeconds" value="3600" />
        <property name="contextPath" value="webdav"/>
        <!-- the default root is System property user.home  -->
        <!-- enable the property below to set the root elsewhere -->
        <!--
        <property name="root" value="/www/webs" />
        -->
    </bean>

<!--
    <bean id="milton.fs.security.manager" class="com.ettrema.http.fs.NullSecurityManager" >
        <property name="realm" value="aRealm" />
    </bean>
-->

    <bean id="milton.fs.security.manager" class="com.ettrema.http.fs.SimpleSecurityManager" >
        <property name="realm" value="aRealm" />
        <property name="nameAndPasswords">
            <map>
                <entry key="me" value="pwd"/>
                <entry key="user1" value="pwd1"/>
                <entry key="user2" value="pwd2"/>
            </map>
        </property>
    </bean>

    <bean id="milton.fs.lock.manager" class="com.ettrema.http.fs.FsMemoryLockManager" />
<!--
    <bean id="milton.response.handler" class="com.bradmcevoy.http.MsOfficeResponseHandler"/>
-->

    <bean id="auth.service" class="com.bradmcevoy.http.AuthenticationService"/>

    <bean id="milton.response.handler" class="com.bradmcevoy.http.webdav.DefaultWebDavResponseHandler">
        <constructor-arg ref="auth.service"/>
    </bean>


    <!-- The compressing response handler wraps the default response handler and compresses
    response content. This will only actually perform compression for specific mime types
    (currently hard coded to text, css and js files) and if the client supports gzip -->
    <bean id="milton.response.handler.compressing" class="com.bradmcevoy.http.CompressingResponseHandler">
        <constructor-arg ref="milton.response.handler" />
    </bean>

    <bean id="milton.handler.helper" class="com.bradmcevoy.http.HandlerHelper">
        <constructor-arg ref="auth.service"/>
        <constructor-arg>
            <list>
            </list>
        </constructor-arg>
    </bean>


    <bean id="milton.protocol.http11" class="com.bradmcevoy.http.http11.Http11Protocol">
        <constructor-arg ref="milton.response.handler.compressing" />
        <constructor-arg ref="milton.handler.helper"/>
    </bean>

    <bean id="milton.protocol.webdav" class="com.bradmcevoy.http.webdav.WebDavProtocol">
        <constructor-arg ref="milton.handler.helper" />
        <constructor-arg ref="milton.resource.type.helper"/>
        <constructor-arg ref="milton.response.handler.compressing" />
        <constructor-arg type="java.util.List" ref="milton.property.sources"/>
        <constructor-arg><null/></constructor-arg>
        <constructor-arg ref="milton.prop.patcher"/>
    </bean>

    <bean id="milton.protocol.handlers" class="com.bradmcevoy.http.ProtocolHandlers">
        <constructor-arg>
            <list>
                <ref bean="milton.protocol.http11"/>
                <ref bean="milton.protocol.webdav"/>
            </list>
        </constructor-arg>
    </bean>

    <bean id="milton.http.manager" class="com.bradmcevoy.http.HttpManager">
        <constructor-arg ref="milton.resource.factory" />
        <constructor-arg ref="milton.response.handler.compressing" />
        <constructor-arg ref="milton.protocol.handlers"/>
        <property name="propertyPermissionService" ref="permissions.authoriser"/>
        <property name="eventManager" ref="event.manager"/>
        <property name="filters">
            <list>
<!--				
                <ref bean="milton.debug.filter" />
-->				
            </list>
        </property>
    </bean>

    <!-- If added to the http manager, this filter will output request and responses
    to the logger -->
    <bean id="milton.debug.filter" class="com.bradmcevoy.http.DebugFilter" />

    <bean id="ftp.user.service" class="com.ettrema.ftp.WrappingFtpSecurityManager">
        <constructor-arg ref="milton.fs.security.manager"/>
    </bean>

    <!-- Adapts the specified milton security manager to the FTP server -->
    <bean id="ftp.user.manager" class="com.ettrema.ftp.UserManagerAdapter">
        <constructor-arg ref="filesystem.resource.factory"/>
        <constructor-arg ref="ftp.user.service"/>
    </bean>

    <!-- This server will provide access to the same resources available on webdav
    via FTP -->
	<!--
    <bean id="ftp.server" class="com.ettrema.ftp.MiltonFtpAdapter">
        <constructor-arg ref="filesystem.resource.factory"/>
        <constructor-arg ref="ftp.user.manager"/>
    </bean>
-->
</beans>